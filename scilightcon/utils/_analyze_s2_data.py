#!/usr/bin/env python
# -*- coding: utf-8 -*-
#==========================================================================
# 
#--------------------------------------------------------------------------
# Copyright (c) 2021 Light Conversion, UAB
# All rights reserved.
# www.lightcon.com
#==========================================================================
import numpy as np
import msgpack
import gzip
from typing import List, Union

import matplotlib.pyplot as plt
import matplotlib as mpl
mpl.rcParams['agg.path.chunksize'] = 100000000

s_duration = 1
m_duration = 100
sml_ylim = [0.95, 1.05]
nrmsd_ylim = [0, 1.0]

# =============================================================================
# ENTER FILE PATH HERE
# =============================================================================
#filepath = r'//kleja/topas/PROGRAMINE IRANGA/Shot-to-shot Stability Measurement Tool/Samples/Shot-to-shot_LAB4 PHAROS_25.0kHz_1030nm_InGaAs_20210917_1337.s2s'
#filepath = r'C:/Users/butkus/Desktop/Shot-to-shot_UNKNOWN_50.0kHz_1030nm_InGaAs_20210924_1157.s2s'
# =============================================================================
class ShotToShotOutlier:
    """Outlier data for the [scilightcon.utils.ShotToShotData][] object
    
    Attributes:
        time (float): Time in seconds, when the outlier was recorded
        voltage (List[float]): Raw voltage data of the data chunk corresponding to the outlier.

    """
    time: float
    voltage: List[float]

    def __init__ (self, time: float, voltage: List[float]):
        self.time = time
        self.voltage = voltage

class ShotToShotData:
    """Data object from *.s2s file, produced by the Shot-To-Shot Measurement Tool software 
    and generated by [scilightcon.utils.load_s2s_data][] method.

    Attributes:
        filepath (str): Absolute file path of the *.s2s file
        version (int): *.s2s file format format
        temporal_data_x (List[float]): Delays in nanoseconds
        temporal_data_y (List[float]): Measured temporal data voltages in volts
        sml_data (List[float]): All measured data, normalized to the mean value
        sml_mean (float): Mean voltage of measured `sml_data`
        nmrsd_data_x (List[float]): Time points in seconds of calculated NRMSD
        nmrsd_data_y (List[float]): Values of calculated NRMSD
        outliers (List[ShotToShotOutlier]): Outlier data
        device_serial_number (str): Serial number of device used in the measurement
        repetition_rate (float): Repetition rate in kHz
        wavelength (float): Wavelength of measured light

    """
    filepath: str
    version: int
    temporal_data_x: List[float]
    temporal_data_y: List[float]
    sml_data: List[float]
    sml_mean: float
    nrmsd_data_x: List[float]
    nrmsd_data_y: List[float]
    outliers: List[ShotToShotOutlier]
    device_serial_number: str
    repetition_rate: float
    wavelength: float

    def __init__(self):
        pass

def load_s2s_data(filepath: str) -> ShotToShotData:
    """Loads data from *.s2s file, produced by the Shot-To-Shot Measurement Tool software

    Args:
        filepath (str): An absolute path to the *.s2s file

    Returns:
        ShotToShotData object
    """
    s2s_data = ShotToShotData()
    
    with gzip.open(filepath, 'rb') as f:
        b = f.read()

        data = msgpack.unpackb(b, use_list = True)

    s2s_data.filepath = filepath
    s2s_data.version = data['Version']
    s2s_data.temporal_data_x = data['TemporalDataX']
    s2s_data.temporal_data_y = data['TemporalDataY']

    s2s_data.sml_data = data['SMLData']
    s2s_data.sml_mean = data['SMLMean']
    s2s_data.nrmsd_data_x = data['NRMSDDataX']
    s2s_data.nrmsd_data_y = data['NRMSDDataY']
    
    _outliers = data.get('Outliers')
    s2s_data.outliers = [ShotToShotOutlier(_outlier[0], _outlier[3]) for _outlier in _outliers]

    s2s_data.device_serial_number = data['DeviceSerialNumber']
    s2s_data.repetition_rate = data['RepetitionRate']
    s2s_data.wavelength = data['Wavelength']
    
    return s2s_data