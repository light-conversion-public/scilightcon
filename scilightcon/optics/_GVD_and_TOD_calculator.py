from typing import List
import numpy as np
from typing import List, Tuple
from scipy.interpolate import interp1d
import math
from ._utils import _get_refractive_index_from_raw_data



def _get_refractive_index_second_derivative(wl: float, wl_t: float, formula_index: int, parameter_index: int, sellmeier_coeffs: List[float], data_n_wl: List[float], data_n: List[float], XC: List[float], YC: List[float]) -> float:
    refractive_index_second_derivative_list = []
   
    if formula_index > 0 and formula_index < 10: 
        sellmeier_coeffs == sellmeier_coeffs
    if formula_index == 10:
        if parameter_index ==0: 
            sellmeier_coeffs = XC
        else: 
            sellmeier_coeffs = YC

    refractive_index_second_derivative_list.append(_get_refractive_index_second_derivative_from_sellmeier_coeffs(wl, formula_index, sellmeier_coeffs))
        
    return refractive_index_second_derivative_list


def _get_refractive_index_second_derivative_from_sellmeier_coeffs(wl: float, formula_index: int, sellmeier_coeffs: List[float]) -> float:
    n_coeffs = len(sellmeier_coeffs)
    if n_coeffs ==0: return ([None]*len(wl))
    C = np.append(sellmeier_coeffs, [0]*(17-len(sellmeier_coeffs)))
    
    if formula_index==1:
        return -(4*C[10]**4*C[9]/(wl**2*(C[10]**2/wl**2 - 1)**3) - 3*C[10]**2*C[9]/(C[10]**2/wl**2 - 1)**2 + 4*C[11]*C[12]**4/(wl**2*(C[12]**2/wl**2 - 1)**3) - 3*C[11]*C[12]**2/(C[12]**2/wl**2 - 1)**2 + 4*C[13]*C[14]**4/(wl**2*(C[14]**2/wl**2 - 1)**3) - 3*C[13]*C[14]**2/(C[14]**2/wl**2 - 1)**2 + 4*C[15]*C[16]**4/(wl**2*(C[16]**2/wl**2 - 1)**3) - 3*C[15]*C[16]**2/(C[16]**2/wl**2 - 1)**2 + 4*C[1]*C[2]**4/(wl**2*(C[2]**2/wl**2 - 1)**3) - 3*C[1]*C[2]**2/(C[2]**2/wl**2 - 1)**2 + 4*C[3]*C[4]**4/(wl**2*(C[4]**2/wl**2 - 1)**3) - 3*C[3]*C[4]**2/(C[4]**2/wl**2 - 1)**2 + 4*C[5]*C[6]**4/(wl**2*(C[6]**2/wl**2 - 1)**3) - 3*C[5]*C[6]**2/(C[6]**2/wl**2 - 1)**2 + 4*C[7]*C[8]**4/(wl**2*(C[8]**2/wl**2 - 1)**3) - 3*C[7]*C[8]**2/(C[8]**2/wl**2 - 1)**2 + (C[10]**2*C[9]/(C[10]**2/wl**2 - 1)**2 + C[11]*C[12]**2/(C[12]**2/wl**2 - 1)**2 + C[13]*C[14]**2/(C[14]**2/wl**2 - 1)**2 + C[15]*C[16]**2/(C[16]**2/wl**2 - 1)**2 + C[1]*C[2]**2/(C[2]**2/wl**2 - 1)**2 + C[3]*C[4]**2/(C[4]**2/wl**2 - 1)**2 + C[5]*C[6]**2/(C[6]**2/wl**2 - 1)**2 + C[7]*C[8]**2/(C[8]**2/wl**2 - 1)**2)**2/(wl**2*(C[0] - C[11]/(C[12]**2/wl**2 - 1) - C[13]/(C[14]**2/wl**2 - 1) - C[15]/(C[16]**2/wl**2 - 1) - C[1]/(C[2]**2/wl**2 - 1) - C[3]/(C[4]**2/wl**2 - 1) - C[5]/(C[6]**2/wl**2 - 1) - C[7]/(C[8]**2/wl**2 - 1) - C[9]/(C[10]**2/wl**2 - 1) + 1)))/(wl**4*np.sqrt(C[0] - C[11]/(C[12]**2/wl**2 - 1) - C[13]/(C[14]**2/wl**2 - 1) - C[15]/(C[16]**2/wl**2 - 1) - C[1]/(C[2]**2/wl**2 - 1) - C[3]/(C[4]**2/wl**2 - 1) - C[5]/(C[6]**2/wl**2 - 1) - C[7]/(C[8]**2/wl**2 - 1) - C[9]/(C[10]**2/wl**2 - 1) + 1))
    if formula_index==2:
        return -(4*C[10]**2*C[9]/(wl**2*(C[10]/wl**2 - 1)**3) - 3*C[10]*C[9]/(C[10]/wl**2 - 1)**2 + 4*C[11]*C[12]**2/(wl**2*(C[12]/wl**2 - 1)**3) - 3*C[11]*C[12]/(C[12]/wl**2 - 1)**2 + 4*C[13]*C[14]**2/(wl**2*(C[14]/wl**2 - 1)**3) - 3*C[13]*C[14]/(C[14]/wl**2 - 1)**2 + 4*C[15]*C[16]**2/(wl**2*(C[16]/wl**2 - 1)**3) - 3*C[15]*C[16]/(C[16]/wl**2 - 1)**2 + 4*C[1]*C[2]**2/(wl**2*(C[2]/wl**2 - 1)**3) - 3*C[1]*C[2]/(C[2]/wl**2 - 1)**2 + 4*C[3]*C[4]**2/(wl**2*(C[4]/wl**2 - 1)**3) - 3*C[3]*C[4]/(C[4]/wl**2 - 1)**2 + 4*C[5]*C[6]**2/(wl**2*(C[6]/wl**2 - 1)**3) - 3*C[5]*C[6]/(C[6]/wl**2 - 1)**2 + 4*C[7]*C[8]**2/(wl**2*(C[8]/wl**2 - 1)**3) - 3*C[7]*C[8]/(C[8]/wl**2 - 1)**2 + (C[10]*C[9]/(C[10]/wl**2 - 1)**2 + C[11]*C[12]/(C[12]/wl**2 - 1)**2 + C[13]*C[14]/(C[14]/wl**2 - 1)**2 + C[15]*C[16]/(C[16]/wl**2 - 1)**2 + C[1]*C[2]/(C[2]/wl**2 - 1)**2 + C[3]*C[4]/(C[4]/wl**2 - 1)**2 + C[5]*C[6]/(C[6]/wl**2 - 1)**2 + C[7]*C[8]/(C[8]/wl**2 - 1)**2)**2/(wl**2*(C[0] - C[11]/(C[12]/wl**2 - 1) - C[13]/(C[14]/wl**2 - 1) - C[15]/(C[16]/wl**2 - 1) - C[1]/(C[2]/wl**2 - 1) - C[3]/(C[4]/wl**2 - 1) - C[5]/(C[6]/wl**2 - 1) - C[7]/(C[8]/wl**2 - 1) - C[9]/(C[10]/wl**2 - 1) + 1)))/(wl**4*np.sqrt(C[0] - C[11]/(C[12]/wl**2 - 1) - C[13]/(C[14]/wl**2 - 1) - C[15]/(C[16]/wl**2 - 1) - C[1]/(C[2]/wl**2 - 1) - C[3]/(C[4]/wl**2 - 1) - C[5]/(C[6]/wl**2 - 1) - C[7]/(C[8]/wl**2 - 1) - C[9]/(C[10]/wl**2 - 1) + 1))
    if formula_index==3:
        return (2*C[10]**2*C[9]*wl**C[10] - 2*C[10]*C[9]*wl**C[10] + 2*C[11]*C[12]**2*wl**C[12] - 2*C[11]*C[12]*wl**C[12] + 2*C[13]*C[14]**2*wl**C[14] - 2*C[13]*C[14]*wl**C[14] + 2*C[15]*C[16]**2*wl**C[16] - 2*C[15]*C[16]*wl**C[16] + 2*C[1]*C[2]**2*wl**C[2] - 2*C[1]*C[2]*wl**C[2] + 2*C[3]*C[4]**2*wl**C[4] - 2*C[3]*C[4]*wl**C[4] + 2*C[5]*C[6]**2*wl**C[6] - 2*C[5]*C[6]*wl**C[6] + 2*C[7]*C[8]**2*wl**C[8] - 2*C[7]*C[8]*wl**C[8] - (C[10]*C[9]*wl**C[10] + C[11]*C[12]*wl**C[12] + C[13]*C[14]*wl**C[14] + C[15]*C[16]*wl**C[16] + C[1]*C[2]*wl**C[2] + C[3]*C[4]*wl**C[4] + C[5]*C[6]*wl**C[6] + C[7]*C[8]*wl**C[8])**2/(C[0] + C[11]*wl**C[12] + C[13]*wl**C[14] + C[15]*wl**C[16] + C[1]*wl**C[2] + C[3]*wl**C[4] + C[5]*wl**C[6] + C[7]*wl**C[8] + C[9]*wl**C[10]))/(4*wl**2*np.sqrt(C[0] + C[11]*wl**C[12] + C[13]*wl**C[14] + C[15]*wl**C[16] + C[1]*wl**C[2] + C[3]*wl**C[4] + C[5]*wl**C[6] + C[7]*wl**C[8] + C[9]*wl**C[10]))
    if formula_index==4:
        return -(-C[10]**2*C[9]*wl**C[10]/(2*wl**2) + C[10]*C[9]*wl**C[10]/(2*wl**2) - C[11]*C[12]**2*wl**C[12]/(2*wl**2) + C[11]*C[12]*wl**C[12]/(2*wl**2) - C[13]*C[14]**2*wl**C[14]/(2*wl**2) + C[13]*C[14]*wl**C[14]/(2*wl**2) - C[15]*C[16]**2*wl**C[16]/(2*wl**2) + C[15]*C[16]*wl**C[16]/(2*wl**2) + C[1]*C[2]**2*wl**C[2]/(2*wl**2*(C[3]**C[4] - wl**2)) + 2*C[1]*C[2]*wl**C[2]/(C[3]**C[4] - wl**2)**2 - C[1]*C[2]*wl**C[2]/(2*wl**2*(C[3]**C[4] - wl**2)) + 4*C[1]*wl**2*wl**C[2]/(C[3]**C[4] - wl**2)**3 + C[1]*wl**C[2]/(C[3]**C[4] - wl**2)**2 + C[5]*C[6]**2*wl**C[6]/(2*wl**2*(C[7]**C[8] - wl**2)) + 2*C[5]*C[6]*wl**C[6]/(C[7]**C[8] - wl**2)**2 - C[5]*C[6]*wl**C[6]/(2*wl**2*(C[7]**C[8] - wl**2)) + 4*C[5]*wl**2*wl**C[6]/(C[7]**C[8] - wl**2)**3 + C[5]*wl**C[6]/(C[7]**C[8] - wl**2)**2 + (C[10]*C[9]*wl**C[10]/wl + C[11]*C[12]*wl**C[12]/wl + C[13]*C[14]*wl**C[14]/wl + C[15]*C[16]*wl**C[16]/wl - C[1]*C[2]*wl**C[2]/(wl*(C[3]**C[4] - wl**2)) - 2*C[1]*wl*wl**C[2]/(C[3]**C[4] - wl**2)**2 - C[5]*C[6]*wl**C[6]/(wl*(C[7]**C[8] - wl**2)) - 2*C[5]*wl*wl**C[6]/(C[7]**C[8] - wl**2)**2)**2/(4*(C[0] + C[11]*wl**C[12] + C[13]*wl**C[14] + C[15]*wl**C[16] - C[1]*wl**C[2]/(C[3]**C[4] - wl**2) - C[5]*wl**C[6]/(C[7]**C[8] - wl**2) + C[9]*wl**C[10])))/np.sqrt(C[0] + C[11]*wl**C[12] + C[13]*wl**C[14] + C[15]*wl**C[16] - C[1]*wl**C[2]/(C[3]**C[4] - wl**2) - C[5]*wl**C[6]/(C[7]**C[8] - wl**2) + C[9]*wl**C[10])
    if formula_index==5:
        return (C[10]**2*C[9]*wl**C[10] - C[10]*C[9]*wl**C[10] + C[1]*C[2]**2*wl**C[2] - C[1]*C[2]*wl**C[2] + C[3]*C[4]**2*wl**C[4] - C[3]*C[4]*wl**C[4] + C[5]*C[6]**2*wl**C[6] - C[5]*C[6]*wl**C[6] + C[7]*C[8]**2*wl**C[8] - C[7]*C[8]*wl**C[8])/wl**2
    if formula_index==6:
        return 2*(3*C[1]/(C[2] - 1/wl**2)**2 + 4*C[1]/(wl**2*(C[2] - 1/wl**2)**3) + 3*C[3]/(C[4] - 1/wl**2)**2 + 4*C[3]/(wl**2*(C[4] - 1/wl**2)**3) + 3*C[5]/(C[6] - 1/wl**2)**2 + 4*C[5]/(wl**2*(C[6] - 1/wl**2)**3) + 3*C[7]/(C[8] - 1/wl**2)**2 + 4*C[7]/(wl**2*(C[8] - 1/wl**2)**3) + 3*C[9]/(C[10] - 1/wl**2)**2 + 4*C[9]/(wl**2*(C[10] - 1/wl**2)**3))/wl**4
    if formula_index==7:
        return 2*(4*C[1]*wl**2/(wl**2 - 0.028)**3 - C[1]/(wl**2 - 0.028)**2 + 12*C[2]*wl**2/(wl**2 - 0.028)**4 - 2*C[2]/(wl**2 - 0.028)**3 + C[3] + 6*C[4]*wl**2 + 15*C[5]*wl**4)
    if formula_index==8:
        return np.sqrt(-(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))*(-8*C[1]*wl**4/(C[2] - wl**2)**3 - 10*C[1]*wl**2/(C[2] - wl**2)**2 - 2*C[1]/(C[2] - wl**2) + 2*C[3] + wl**2*(-2 + (2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))**2*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**2/(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1) + 4*wl**2*(-2 + (2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**2/(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1) - 2*wl**2*(-2 + (2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**2/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1) - 8*wl**2*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**2/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1) + 4*wl**2*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**2*(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1)**2 + (2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)*(4*C[1]*wl**4/(C[2] - wl**2)**3 + 5*C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))/(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)
    if formula_index==9:
        return -(4*C[1]*wl**2/(C[2] - wl**2)**3 + C[1]/(C[2] - wl**2)**2 + 4*C[3]*(C[4] - wl)**3/(C[5] + (C[4] - wl)**2)**3 - 3*C[3]*(C[4] - wl)/(C[5] + (C[4] - wl)**2)**2 + (2*C[1]*wl/(C[2] - wl**2)**2 + 2*C[3]*(C[4] - wl)**2/(C[5] + (C[4] - wl)**2)**2 - C[3]/(C[5] + (C[4] - wl)**2))**2/(4*(C[0] - C[1]/(C[2] - wl**2) - C[3]*(C[4] - wl)/(C[5] + (C[4] - wl)**2))))/np.sqrt(C[0] - C[1]/(C[2] - wl**2) - C[3]*(C[4] - wl)/(C[5] + (C[4] - wl)**2))   
    if formula_index==10:
        return -(-16*C[10]**2*C[9]*wl**10/(C[10]*wl**4 - 1)**3 + 22*C[10]*C[9]*wl**6/(C[10]*wl**4 - 1)**2 + 4*C[1]*wl**2/(C[2] - wl**2)**3 + C[1]/(C[2] - wl**2)**2 - 4*C[3]*C[4]**2*wl**4/(C[4]*wl**2 - 1)**3 + 5*C[3]*C[4]*wl**2/(C[4]*wl**2 - 1)**2 - C[3]/(C[4]*wl**2 - 1) + 16*C[5]*wl**6/(C[6] - wl**4)**3 + 6*C[5]*wl**2/(C[6] - wl**4)**2 - 16*C[7]*C[8]**2*wl**8/(C[8]*wl**4 - 1)**3 + 14*C[7]*C[8]*wl**4/(C[8]*wl**4 - 1)**2 - C[7]/(C[8]*wl**4 - 1) - 6*C[9]*wl**2/(C[10]*wl**4 - 1) + wl**2*(2*C[10]*C[9]*wl**6/(C[10]*wl**4 - 1)**2 + C[1]/(C[2] - wl**2)**2 + C[3]*C[4]*wl**2/(C[4]*wl**2 - 1)**2 - C[3]/(C[4]*wl**2 - 1) + 2*C[5]*wl**2/(C[6] - wl**4)**2 + 2*C[7]*C[8]*wl**4/(C[8]*wl**4 - 1)**2 - C[7]/(C[8]*wl**4 - 1) - 2*C[9]*wl**2/(C[10]*wl**4 - 1))**2/(C[0] - C[1]/(C[2] - wl**2) + C[3]*wl**2/(C[4]*wl**2 - 1) - C[5]/(C[6] - wl**4) + C[7]*wl**2/(C[8]*wl**4 - 1) + C[9]*wl**4/(C[10]*wl**4 - 1)))/np.sqrt(C[0] - C[1]/(C[2] - wl**2) + C[3]*wl**2/(C[4]*wl**2 - 1) - C[5]/(C[6] - wl**4) + C[7]*wl**2/(C[8]*wl**4 - 1) + C[9]*wl**4/(C[10]*wl**4 - 1))
    

def _get_refractive_index_third_derivative(wl: float, wl_b: float, wl_t: float, formula_index: int, parameter_index: int, sellmeier_coeffs: List[float], data_n_wl: List[float], data_n: List[float], XC: List[float], YC: List[float]) -> float:
    refractive_index_third_derivative_list = []

    if formula_index > 0 and formula_index < 10: 
        sellmeier_coeffs == sellmeier_coeffs
    if formula_index == 10:
        if parameter_index ==0: 
            sellmeier_coeffs = XC
        else: 
            sellmeier_coeffs = YC

    refractive_index_third_derivative_list.append(_get_refractive_index_third_derivative_from_sellmeier_coeffs(wl, formula_index, sellmeier_coeffs))
        
    return refractive_index_third_derivative_list


def _get_refractive_index_third_derivative_from_sellmeier_coeffs(wl: float, formula_index: int, sellmeier_coeffs: List[float]) -> float:
    n_coeffs = len(sellmeier_coeffs)
    if n_coeffs ==0: return ([None]*len(wl))
    C = np.append(sellmeier_coeffs, [0]*(17-len(sellmeier_coeffs)))
    
    if formula_index==1:
        return -3*(8*C[10]**6*C[9]/(wl**4*(C[10]**2/wl**2 - 1)**4) - 12*C[10]**4*C[9]/(wl**2*(C[10]**2/wl**2 - 1)**3) + 4*C[10]**2*C[9]/(C[10]**2/wl**2 - 1)**2 + 8*C[11]*C[12]**6/(wl**4*(C[12]**2/wl**2 - 1)**4) - 12*C[11]*C[12]**4/(wl**2*(C[12]**2/wl**2 - 1)**3) + 4*C[11]*C[12]**2/(C[12]**2/wl**2 - 1)**2 + 8*C[13]*C[14]**6/(wl**4*(C[14]**2/wl**2 - 1)**4) - 12*C[13]*C[14]**4/(wl**2*(C[14]**2/wl**2 - 1)**3) + 4*C[13]*C[14]**2/(C[14]**2/wl**2 - 1)**2 + 8*C[15]*C[16]**6/(wl**4*(C[16]**2/wl**2 - 1)**4) - 12*C[15]*C[16]**4/(wl**2*(C[16]**2/wl**2 - 1)**3) + 4*C[15]*C[16]**2/(C[16]**2/wl**2 - 1)**2 + 8*C[1]*C[2]**6/(wl**4*(C[2]**2/wl**2 - 1)**4) - 12*C[1]*C[2]**4/(wl**2*(C[2]**2/wl**2 - 1)**3) + 4*C[1]*C[2]**2/(C[2]**2/wl**2 - 1)**2 + 8*C[3]*C[4]**6/(wl**4*(C[4]**2/wl**2 - 1)**4) - 12*C[3]*C[4]**4/(wl**2*(C[4]**2/wl**2 - 1)**3) + 4*C[3]*C[4]**2/(C[4]**2/wl**2 - 1)**2 + 8*C[5]*C[6]**6/(wl**4*(C[6]**2/wl**2 - 1)**4) - 12*C[5]*C[6]**4/(wl**2*(C[6]**2/wl**2 - 1)**3) + 4*C[5]*C[6]**2/(C[6]**2/wl**2 - 1)**2 + 8*C[7]*C[8]**6/(wl**4*(C[8]**2/wl**2 - 1)**4) - 12*C[7]*C[8]**4/(wl**2*(C[8]**2/wl**2 - 1)**3) + 4*C[7]*C[8]**2/(C[8]**2/wl**2 - 1)**2 + (C[10]**2*C[9]/(C[10]**2/wl**2 - 1)**2 + C[11]*C[12]**2/(C[12]**2/wl**2 - 1)**2 + C[13]*C[14]**2/(C[14]**2/wl**2 - 1)**2 + C[15]*C[16]**2/(C[16]**2/wl**2 - 1)**2 + C[1]*C[2]**2/(C[2]**2/wl**2 - 1)**2 + C[3]*C[4]**2/(C[4]**2/wl**2 - 1)**2 + C[5]*C[6]**2/(C[6]**2/wl**2 - 1)**2 + C[7]*C[8]**2/(C[8]**2/wl**2 - 1)**2)*(4*C[10]**4*C[9]/(wl**2*(C[10]**2/wl**2 - 1)**3) - 3*C[10]**2*C[9]/(C[10]**2/wl**2 - 1)**2 + 4*C[11]*C[12]**4/(wl**2*(C[12]**2/wl**2 - 1)**3) - 3*C[11]*C[12]**2/(C[12]**2/wl**2 - 1)**2 + 4*C[13]*C[14]**4/(wl**2*(C[14]**2/wl**2 - 1)**3) - 3*C[13]*C[14]**2/(C[14]**2/wl**2 - 1)**2 + 4*C[15]*C[16]**4/(wl**2*(C[16]**2/wl**2 - 1)**3) - 3*C[15]*C[16]**2/(C[16]**2/wl**2 - 1)**2 + 4*C[1]*C[2]**4/(wl**2*(C[2]**2/wl**2 - 1)**3) - 3*C[1]*C[2]**2/(C[2]**2/wl**2 - 1)**2 + 4*C[3]*C[4]**4/(wl**2*(C[4]**2/wl**2 - 1)**3) - 3*C[3]*C[4]**2/(C[4]**2/wl**2 - 1)**2 + 4*C[5]*C[6]**4/(wl**2*(C[6]**2/wl**2 - 1)**3) - 3*C[5]*C[6]**2/(C[6]**2/wl**2 - 1)**2 + 4*C[7]*C[8]**4/(wl**2*(C[8]**2/wl**2 - 1)**3) - 3*C[7]*C[8]**2/(C[8]**2/wl**2 - 1)**2)/(wl**2*(C[0] - C[11]/(C[12]**2/wl**2 - 1) - C[13]/(C[14]**2/wl**2 - 1) - C[15]/(C[16]**2/wl**2 - 1) - C[1]/(C[2]**2/wl**2 - 1) - C[3]/(C[4]**2/wl**2 - 1) - C[5]/(C[6]**2/wl**2 - 1) - C[7]/(C[8]**2/wl**2 - 1) - C[9]/(C[10]**2/wl**2 - 1) + 1)) + (C[10]**2*C[9]/(C[10]**2/wl**2 - 1)**2 + C[11]*C[12]**2/(C[12]**2/wl**2 - 1)**2 + C[13]*C[14]**2/(C[14]**2/wl**2 - 1)**2 + C[15]*C[16]**2/(C[16]**2/wl**2 - 1)**2 + C[1]*C[2]**2/(C[2]**2/wl**2 - 1)**2 + C[3]*C[4]**2/(C[4]**2/wl**2 - 1)**2 + C[5]*C[6]**2/(C[6]**2/wl**2 - 1)**2 + C[7]*C[8]**2/(C[8]**2/wl**2 - 1)**2)**3/(wl**4*(C[0] - C[11]/(C[12]**2/wl**2 - 1) - C[13]/(C[14]**2/wl**2 - 1) - C[15]/(C[16]**2/wl**2 - 1) - C[1]/(C[2]**2/wl**2 - 1) - C[3]/(C[4]**2/wl**2 - 1) - C[5]/(C[6]**2/wl**2 - 1) - C[7]/(C[8]**2/wl**2 - 1) - C[9]/(C[10]**2/wl**2 - 1) + 1)**2))/(wl**5*np.sqrt(C[0] - C[11]/(C[12]**2/wl**2 - 1) - C[13]/(C[14]**2/wl**2 - 1) - C[15]/(C[16]**2/wl**2 - 1) - C[1]/(C[2]**2/wl**2 - 1) - C[3]/(C[4]**2/wl**2 - 1) - C[5]/(C[6]**2/wl**2 - 1) - C[7]/(C[8]**2/wl**2 - 1) - C[9]/(C[10]**2/wl**2 - 1) + 1))
    if formula_index==2:
        return -3*(8*C[10]**3*C[9]/(wl**4*(C[10]/wl**2 - 1)**4) - 12*C[10]**2*C[9]/(wl**2*(C[10]/wl**2 - 1)**3) + 4*C[10]*C[9]/(C[10]/wl**2 - 1)**2 + 8*C[11]*C[12]**3/(wl**4*(C[12]/wl**2 - 1)**4) - 12*C[11]*C[12]**2/(wl**2*(C[12]/wl**2 - 1)**3) + 4*C[11]*C[12]/(C[12]/wl**2 - 1)**2 + 8*C[13]*C[14]**3/(wl**4*(C[14]/wl**2 - 1)**4) - 12*C[13]*C[14]**2/(wl**2*(C[14]/wl**2 - 1)**3) + 4*C[13]*C[14]/(C[14]/wl**2 - 1)**2 + 8*C[15]*C[16]**3/(wl**4*(C[16]/wl**2 - 1)**4) - 12*C[15]*C[16]**2/(wl**2*(C[16]/wl**2 - 1)**3) + 4*C[15]*C[16]/(C[16]/wl**2 - 1)**2 + 8*C[1]*C[2]**3/(wl**4*(C[2]/wl**2 - 1)**4) - 12*C[1]*C[2]**2/(wl**2*(C[2]/wl**2 - 1)**3) + 4*C[1]*C[2]/(C[2]/wl**2 - 1)**2 + 8*C[3]*C[4]**3/(wl**4*(C[4]/wl**2 - 1)**4) - 12*C[3]*C[4]**2/(wl**2*(C[4]/wl**2 - 1)**3) + 4*C[3]*C[4]/(C[4]/wl**2 - 1)**2 + 8*C[5]*C[6]**3/(wl**4*(C[6]/wl**2 - 1)**4) - 12*C[5]*C[6]**2/(wl**2*(C[6]/wl**2 - 1)**3) + 4*C[5]*C[6]/(C[6]/wl**2 - 1)**2 + 8*C[7]*C[8]**3/(wl**4*(C[8]/wl**2 - 1)**4) - 12*C[7]*C[8]**2/(wl**2*(C[8]/wl**2 - 1)**3) + 4*C[7]*C[8]/(C[8]/wl**2 - 1)**2 + (C[10]*C[9]/(C[10]/wl**2 - 1)**2 + C[11]*C[12]/(C[12]/wl**2 - 1)**2 + C[13]*C[14]/(C[14]/wl**2 - 1)**2 + C[15]*C[16]/(C[16]/wl**2 - 1)**2 + C[1]*C[2]/(C[2]/wl**2 - 1)**2 + C[3]*C[4]/(C[4]/wl**2 - 1)**2 + C[5]*C[6]/(C[6]/wl**2 - 1)**2 + C[7]*C[8]/(C[8]/wl**2 - 1)**2)*(4*C[10]**2*C[9]/(wl**2*(C[10]/wl**2 - 1)**3) - 3*C[10]*C[9]/(C[10]/wl**2 - 1)**2 + 4*C[11]*C[12]**2/(wl**2*(C[12]/wl**2 - 1)**3) - 3*C[11]*C[12]/(C[12]/wl**2 - 1)**2 + 4*C[13]*C[14]**2/(wl**2*(C[14]/wl**2 - 1)**3) - 3*C[13]*C[14]/(C[14]/wl**2 - 1)**2 + 4*C[15]*C[16]**2/(wl**2*(C[16]/wl**2 - 1)**3) - 3*C[15]*C[16]/(C[16]/wl**2 - 1)**2 + 4*C[1]*C[2]**2/(wl**2*(C[2]/wl**2 - 1)**3) - 3*C[1]*C[2]/(C[2]/wl**2 - 1)**2 + 4*C[3]*C[4]**2/(wl**2*(C[4]/wl**2 - 1)**3) - 3*C[3]*C[4]/(C[4]/wl**2 - 1)**2 + 4*C[5]*C[6]**2/(wl**2*(C[6]/wl**2 - 1)**3) - 3*C[5]*C[6]/(C[6]/wl**2 - 1)**2 + 4*C[7]*C[8]**2/(wl**2*(C[8]/wl**2 - 1)**3) - 3*C[7]*C[8]/(C[8]/wl**2 - 1)**2)/(wl**2*(C[0] - C[11]/(C[12]/wl**2 - 1) - C[13]/(C[14]/wl**2 - 1) - C[15]/(C[16]/wl**2 - 1) - C[1]/(C[2]/wl**2 - 1) - C[3]/(C[4]/wl**2 - 1) - C[5]/(C[6]/wl**2 - 1) - C[7]/(C[8]/wl**2 - 1) - C[9]/(C[10]/wl**2 - 1) + 1)) + (C[10]*C[9]/(C[10]/wl**2 - 1)**2 + C[11]*C[12]/(C[12]/wl**2 - 1)**2 + C[13]*C[14]/(C[14]/wl**2 - 1)**2 + C[15]*C[16]/(C[16]/wl**2 - 1)**2 + C[1]*C[2]/(C[2]/wl**2 - 1)**2 + C[3]*C[4]/(C[4]/wl**2 - 1)**2 + C[5]*C[6]/(C[6]/wl**2 - 1)**2 + C[7]*C[8]/(C[8]/wl**2 - 1)**2)**3/(wl**4*(C[0] - C[11]/(C[12]/wl**2 - 1) - C[13]/(C[14]/wl**2 - 1) - C[15]/(C[16]/wl**2 - 1) - C[1]/(C[2]/wl**2 - 1) - C[3]/(C[4]/wl**2 - 1) - C[5]/(C[6]/wl**2 - 1) - C[7]/(C[8]/wl**2 - 1) - C[9]/(C[10]/wl**2 - 1) + 1)**2))/(wl**5*np.sqrt(C[0] - C[11]/(C[12]/wl**2 - 1) - C[13]/(C[14]/wl**2 - 1) - C[15]/(C[16]/wl**2 - 1) - C[1]/(C[2]/wl**2 - 1) - C[3]/(C[4]/wl**2 - 1) - C[5]/(C[6]/wl**2 - 1) - C[7]/(C[8]/wl**2 - 1) - C[9]/(C[10]/wl**2 - 1) + 1))
    if formula_index==3:
        return (C[10]**3*C[9]*wl**C[10]/2 - 3*C[10]**2*C[9]*wl**C[10]/2 + C[10]*C[9]*wl**C[10] + C[11]*C[12]**3*wl**C[12]/2 - 3*C[11]*C[12]**2*wl**C[12]/2 + C[11]*C[12]*wl**C[12] + C[13]*C[14]**3*wl**C[14]/2 - 3*C[13]*C[14]**2*wl**C[14]/2 + C[13]*C[14]*wl**C[14] + C[15]*C[16]**3*wl**C[16]/2 - 3*C[15]*C[16]**2*wl**C[16]/2 + C[15]*C[16]*wl**C[16] + C[1]*C[2]**3*wl**C[2]/2 - 3*C[1]*C[2]**2*wl**C[2]/2 + C[1]*C[2]*wl**C[2] + C[3]*C[4]**3*wl**C[4]/2 - 3*C[3]*C[4]**2*wl**C[4]/2 + C[3]*C[4]*wl**C[4] + C[5]*C[6]**3*wl**C[6]/2 - 3*C[5]*C[6]**2*wl**C[6]/2 + C[5]*C[6]*wl**C[6] + C[7]*C[8]**3*wl**C[8]/2 - 3*C[7]*C[8]**2*wl**C[8]/2 + C[7]*C[8]*wl**C[8] + 3*(C[10]*C[9]*wl**C[10] + C[11]*C[12]*wl**C[12] + C[13]*C[14]*wl**C[14] + C[15]*C[16]*wl**C[16] + C[1]*C[2]*wl**C[2] + C[3]*C[4]*wl**C[4] + C[5]*C[6]*wl**C[6] + C[7]*C[8]*wl**C[8])**3/(8*(C[0] + C[11]*wl**C[12] + C[13]*wl**C[14] + C[15]*wl**C[16] + C[1]*wl**C[2] + C[3]*wl**C[4] + C[5]*wl**C[6] + C[7]*wl**C[8] + C[9]*wl**C[10])**2) - 3*(C[10]*C[9]*wl**C[10] + C[11]*C[12]*wl**C[12] + C[13]*C[14]*wl**C[14] + C[15]*C[16]*wl**C[16] + C[1]*C[2]*wl**C[2] + C[3]*C[4]*wl**C[4] + C[5]*C[6]*wl**C[6] + C[7]*C[8]*wl**C[8])*(C[10]**2*C[9]*wl**C[10] - C[10]*C[9]*wl**C[10] + C[11]*C[12]**2*wl**C[12] - C[11]*C[12]*wl**C[12] + C[13]*C[14]**2*wl**C[14] - C[13]*C[14]*wl**C[14] + C[15]*C[16]**2*wl**C[16] - C[15]*C[16]*wl**C[16] + C[1]*C[2]**2*wl**C[2] - C[1]*C[2]*wl**C[2] + C[3]*C[4]**2*wl**C[4] - C[3]*C[4]*wl**C[4] + C[5]*C[6]**2*wl**C[6] - C[5]*C[6]*wl**C[6] + C[7]*C[8]**2*wl**C[8] - C[7]*C[8]*wl**C[8])/(4*(C[0] + C[11]*wl**C[12] + C[13]*wl**C[14] + C[15]*wl**C[16] + C[1]*wl**C[2] + C[3]*wl**C[4] + C[5]*wl**C[6] + C[7]*wl**C[8] + C[9]*wl**C[10])))/(wl**3*np.sqrt(C[0] + C[11]*wl**C[12] + C[13]*wl**C[14] + C[15]*wl**C[16] + C[1]*wl**C[2] + C[3]*wl**C[4] + C[5]*wl**C[6] + C[7]*wl**C[8] + C[9]*wl**C[10]))
    if formula_index==4:
        return (C[10]**3*C[9]*wl**C[10]/(2*wl**3) - 3*C[10]**2*C[9]*wl**C[10]/(2*wl**3) + C[10]*C[9]*wl**C[10]/wl**3 + C[11]*C[12]**3*wl**C[12]/(2*wl**3) - 3*C[11]*C[12]**2*wl**C[12]/(2*wl**3) + C[11]*C[12]*wl**C[12]/wl**3 + C[13]*C[14]**3*wl**C[14]/(2*wl**3) - 3*C[13]*C[14]**2*wl**C[14]/(2*wl**3) + C[13]*C[14]*wl**C[14]/wl**3 + C[15]*C[16]**3*wl**C[16]/(2*wl**3) - 3*C[15]*C[16]**2*wl**C[16]/(2*wl**3) + C[15]*C[16]*wl**C[16]/wl**3 - C[1]*C[2]**3*wl**C[2]/(2*wl**3*(C[3]**C[4] - wl**2)) - 3*C[1]*C[2]**2*wl**C[2]/(wl*(C[3]**C[4] - wl**2)**2) + 3*C[1]*C[2]**2*wl**C[2]/(2*wl**3*(C[3]**C[4] - wl**2)) - 12*C[1]*C[2]*wl*wl**C[2]/(C[3]**C[4] - wl**2)**3 - C[1]*C[2]*wl**C[2]/(wl**3*(C[3]**C[4] - wl**2)) - 24*C[1]*wl**3*wl**C[2]/(C[3]**C[4] - wl**2)**4 - 12*C[1]*wl*wl**C[2]/(C[3]**C[4] - wl**2)**3 - C[5]*C[6]**3*wl**C[6]/(2*wl**3*(C[7]**C[8] - wl**2)) - 3*C[5]*C[6]**2*wl**C[6]/(wl*(C[7]**C[8] - wl**2)**2) + 3*C[5]*C[6]**2*wl**C[6]/(2*wl**3*(C[7]**C[8] - wl**2)) - 12*C[5]*C[6]*wl*wl**C[6]/(C[7]**C[8] - wl**2)**3 - C[5]*C[6]*wl**C[6]/(wl**3*(C[7]**C[8] - wl**2)) - 24*C[5]*wl**3*wl**C[6]/(C[7]**C[8] - wl**2)**4 - 12*C[5]*wl*wl**C[6]/(C[7]**C[8] - wl**2)**3 + 3*(C[10]*C[9]*wl**C[10]/wl + C[11]*C[12]*wl**C[12]/wl + C[13]*C[14]*wl**C[14]/wl + C[15]*C[16]*wl**C[16]/wl - C[1]*C[2]*wl**C[2]/(wl*(C[3]**C[4] - wl**2)) - 2*C[1]*wl*wl**C[2]/(C[3]**C[4] - wl**2)**2 - C[5]*C[6]*wl**C[6]/(wl*(C[7]**C[8] - wl**2)) - 2*C[5]*wl*wl**C[6]/(C[7]**C[8] - wl**2)**2)*(-C[10]**2*C[9]*wl**C[10]/wl**2 + C[10]*C[9]*wl**C[10]/wl**2 - C[11]*C[12]**2*wl**C[12]/wl**2 + C[11]*C[12]*wl**C[12]/wl**2 - C[13]*C[14]**2*wl**C[14]/wl**2 + C[13]*C[14]*wl**C[14]/wl**2 - C[15]*C[16]**2*wl**C[16]/wl**2 + C[15]*C[16]*wl**C[16]/wl**2 + C[1]*C[2]**2*wl**C[2]/(wl**2*(C[3]**C[4] - wl**2)) + 4*C[1]*C[2]*wl**C[2]/(C[3]**C[4] - wl**2)**2 - C[1]*C[2]*wl**C[2]/(wl**2*(C[3]**C[4] - wl**2)) + 8*C[1]*wl**2*wl**C[2]/(C[3]**C[4] - wl**2)**3 + 2*C[1]*wl**C[2]/(C[3]**C[4] - wl**2)**2 + C[5]*C[6]**2*wl**C[6]/(wl**2*(C[7]**C[8] - wl**2)) + 4*C[5]*C[6]*wl**C[6]/(C[7]**C[8] - wl**2)**2 - C[5]*C[6]*wl**C[6]/(wl**2*(C[7]**C[8] - wl**2)) + 8*C[5]*wl**2*wl**C[6]/(C[7]**C[8] - wl**2)**3 + 2*C[5]*wl**C[6]/(C[7]**C[8] - wl**2)**2)/(4*(C[0] + C[11]*wl**C[12] + C[13]*wl**C[14] + C[15]*wl**C[16] - C[1]*wl**C[2]/(C[3]**C[4] - wl**2) - C[5]*wl**C[6]/(C[7]**C[8] - wl**2) + C[9]*wl**C[10])) + 3*(C[10]*C[9]*wl**C[10]/wl + C[11]*C[12]*wl**C[12]/wl + C[13]*C[14]*wl**C[14]/wl + C[15]*C[16]*wl**C[16]/wl - C[1]*C[2]*wl**C[2]/(wl*(C[3]**C[4] - wl**2)) - 2*C[1]*wl*wl**C[2]/(C[3]**C[4] - wl**2)**2 - C[5]*C[6]*wl**C[6]/(wl*(C[7]**C[8] - wl**2)) - 2*C[5]*wl*wl**C[6]/(C[7]**C[8] - wl**2)**2)**3/(8*(C[0] + C[11]*wl**C[12] + C[13]*wl**C[14] + C[15]*wl**C[16] - C[1]*wl**C[2]/(C[3]**C[4] - wl**2) - C[5]*wl**C[6]/(C[7]**C[8] - wl**2) + C[9]*wl**C[10])**2))/np.sqrt(C[0] + C[11]*wl**C[12] + C[13]*wl**C[14] + C[15]*wl**C[16] - C[1]*wl**C[2]/(C[3]**C[4] - wl**2) - C[5]*wl**C[6]/(C[7]**C[8] - wl**2) + C[9]*wl**C[10])
    if formula_index==5:
        return (C[10]**3*C[9]*wl**C[10] - 3*C[10]**2*C[9]*wl**C[10] + 2*C[10]*C[9]*wl**C[10] + C[1]*C[2]**3*wl**C[2] - 3*C[1]*C[2]**2*wl**C[2] + 2*C[1]*C[2]*wl**C[2] + C[3]*C[4]**3*wl**C[4] - 3*C[3]*C[4]**2*wl**C[4] + 2*C[3]*C[4]*wl**C[4] + C[5]*C[6]**3*wl**C[6] - 3*C[5]*C[6]**2*wl**C[6] + 2*C[5]*C[6]*wl**C[6] + C[7]*C[8]**3*wl**C[8] - 3*C[7]*C[8]**2*wl**C[8] + 2*C[7]*C[8]*wl**C[8])/wl**3
    if formula_index==6:
        return -24*(C[1]/(C[2] - 1/wl**2)**2 + 3*C[1]/(wl**2*(C[2] - 1/wl**2)**3) + 2*C[1]/(wl**4*(C[2] - 1/wl**2)**4) + C[3]/(C[4] - 1/wl**2)**2 + 3*C[3]/(wl**2*(C[4] - 1/wl**2)**3) + 2*C[3]/(wl**4*(C[4] - 1/wl**2)**4) + C[5]/(C[6] - 1/wl**2)**2 + 3*C[5]/(wl**2*(C[6] - 1/wl**2)**3) + 2*C[5]/(wl**4*(C[6] - 1/wl**2)**4) + C[7]/(C[8] - 1/wl**2)**2 + 3*C[7]/(wl**2*(C[8] - 1/wl**2)**3) + 2*C[7]/(wl**4*(C[8] - 1/wl**2)**4) + C[9]/(C[10] - 1/wl**2)**2 + 3*C[9]/(wl**2*(C[10] - 1/wl**2)**3) + 2*C[9]/(wl**4*(C[10] - 1/wl**2)**4))/wl**5
    if formula_index==7:
        return 24*wl*(-2*C[1]*wl**2/(wl**2 - 0.028)**4 + C[1]/(wl**2 - 0.028)**3 - 8*C[2]*wl**2/(wl**2 - 0.028)**5 + 3*C[2]/(wl**2 - 0.028)**4 + C[4] + 5*C[5]*wl**2)
    if formula_index==8:
        return wl*np.sqrt(-(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))*(-24*C[1]*(2*wl**4/(C[2] - wl**2)**2 + 3*wl**2/(C[2] - wl**2) + 1)/(C[2] - wl**2)**2 + 12*C[1]*(2*wl**4/(C[2] - wl**2)**2 + 3*wl**2/(C[2] - wl**2) + 1)*(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/((C[2] - wl**2)**2*(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1)) + wl**2*(-2 + (2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))**3*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**3/(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)**2 + 12*wl**2*(-2 + (2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))**2*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**3/(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)**2 - 6*wl**2*(-2 + (2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))**2*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**3/((C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1)*(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)) + 32*wl**2*(-2 + (2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**3/(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)**2 - 16*wl**2*(-2 + (2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**3/((C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1)*(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)) - 48*wl**2*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**3/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1)**2 + 24*wl**2*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**3*(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1)**3 + 4*(-2 + (2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])*(4*C[1]*wl**4/(C[2] - wl**2)**3 + 5*C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])/(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1) - 3*(-2 + (2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])*(8*C[1]*wl**4/(C[2] - wl**2)**3 + 10*C[1]*wl**2/(C[2] - wl**2)**2 + 2*C[1]/(C[2] - wl**2) - 2*C[3] + 8*wl**2*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**2/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1) - 4*wl**2*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**2*(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1)**2 - (2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)*(4*C[1]*wl**4/(C[2] - wl**2)**3 + 5*C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))/(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1) - 2*(-2 + (2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])*(4*C[1]*wl**4/(C[2] - wl**2)**3 + 5*C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1) - 8*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])*(8*C[1]*wl**4/(C[2] - wl**2)**3 + 10*C[1]*wl**2/(C[2] - wl**2)**2 + 2*C[1]/(C[2] - wl**2) - 2*C[3] + 8*wl**2*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**2/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1) - 4*wl**2*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**2*(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1)**2 - (2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)*(4*C[1]*wl**4/(C[2] - wl**2)**3 + 5*C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))/(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1) - 24*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])*(4*C[1]*wl**4/(C[2] - wl**2)**3 + 5*C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1) + 4*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])*(8*C[1]*wl**4/(C[2] - wl**2)**3 + 10*C[1]*wl**2/(C[2] - wl**2)**2 + 2*C[1]/(C[2] - wl**2) - 2*C[3] + 8*wl**2*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**2/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1) - 4*wl**2*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])**2*(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1)**2 - (2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)*(4*C[1]*wl**4/(C[2] - wl**2)**3 + 5*C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1))/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1) + 12*(C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])*(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)*(4*C[1]*wl**4/(C[2] - wl**2)**3 + 5*C[1]*wl**2/(C[2] - wl**2)**2 + C[1]/(C[2] - wl**2) - C[3])/(C[0] - C[1]*wl**2/(C[2] - wl**2) + C[3]*wl**2 - 1)**2)/(2*C[0] - 2*C[1]*wl**2/(C[2] - wl**2) + 2*C[3]*wl**2 + 1)
    if formula_index==9:
        return -3*(8*C[1]*wl**3/(C[2] - wl**2)**4 + 4*C[1]*wl/(C[2] - wl**2)**3 + 8*C[3]*(C[4] - wl)**4/(C[5] + (C[4] - wl)**2)**4 - 8*C[3]*(C[4] - wl)**2/(C[5] + (C[4] - wl)**2)**3 + C[3]/(C[5] + (C[4] - wl)**2)**2 + (2*C[1]*wl/(C[2] - wl**2)**2 + 2*C[3]*(C[4] - wl)**2/(C[5] + (C[4] - wl)**2)**2 - C[3]/(C[5] + (C[4] - wl)**2))*(4*C[1]*wl**2/(C[2] - wl**2)**3 + C[1]/(C[2] - wl**2)**2 + 4*C[3]*(C[4] - wl)**3/(C[5] + (C[4] - wl)**2)**3 - 3*C[3]*(C[4] - wl)/(C[5] + (C[4] - wl)**2)**2)/(2*(C[0] - C[1]/(C[2] - wl**2) - C[3]*(C[4] - wl)/(C[5] + (C[4] - wl)**2))) + (2*C[1]*wl/(C[2] - wl**2)**2 + 2*C[3]*(C[4] - wl)**2/(C[5] + (C[4] - wl)**2)**2 - C[3]/(C[5] + (C[4] - wl)**2))**3/(8*(C[0] - C[1]/(C[2] - wl**2) - C[3]*(C[4] - wl)/(C[5] + (C[4] - wl)**2))**2))/np.sqrt(C[0] - C[1]/(C[2] - wl**2) - C[3]*(C[4] - wl)/(C[5] + (C[4] - wl)**2))
    if formula_index==10:
        return -3*wl*(64*C[10]**3*C[9]*wl**12/(C[10]*wl**4 - 1)**4 - 112*C[10]**2*C[9]*wl**8/(C[10]*wl**4 - 1)**3 + 52*C[10]*C[9]*wl**4/(C[10]*wl**4 - 1)**2 + 8*C[1]*wl**2/(C[2] - wl**2)**4 + 4*C[1]/(C[2] - wl**2)**3 + 8*C[3]*C[4]**3*wl**4/(C[4]*wl**2 - 1)**4 - 12*C[3]*C[4]**2*wl**2/(C[4]*wl**2 - 1)**3 + 4*C[3]*C[4]/(C[4]*wl**2 - 1)**2 + 64*C[5]*wl**8/(C[6] - wl**4)**4 + 48*C[5]*wl**4/(C[6] - wl**4)**3 + 4*C[5]/(C[6] - wl**4)**2 + 64*C[7]*C[8]**3*wl**10/(C[8]*wl**4 - 1)**4 - 80*C[7]*C[8]**2*wl**6/(C[8]*wl**4 - 1)**3 + 20*C[7]*C[8]*wl**2/(C[8]*wl**4 - 1)**2 - 4*C[9]/(C[10]*wl**4 - 1) + wl**2*(2*C[10]*C[9]*wl**6/(C[10]*wl**4 - 1)**2 + C[1]/(C[2] - wl**2)**2 + C[3]*C[4]*wl**2/(C[4]*wl**2 - 1)**2 - C[3]/(C[4]*wl**2 - 1) + 2*C[5]*wl**2/(C[6] - wl**4)**2 + 2*C[7]*C[8]*wl**4/(C[8]*wl**4 - 1)**2 - C[7]/(C[8]*wl**4 - 1) - 2*C[9]*wl**2/(C[10]*wl**4 - 1))**3/(C[0] - C[1]/(C[2] - wl**2) + C[3]*wl**2/(C[4]*wl**2 - 1) - C[5]/(C[6] - wl**4) + C[7]*wl**2/(C[8]*wl**4 - 1) + C[9]*wl**4/(C[10]*wl**4 - 1))**2 + (2*C[10]*C[9]*wl**6/(C[10]*wl**4 - 1)**2 + C[1]/(C[2] - wl**2)**2 + C[3]*C[4]*wl**2/(C[4]*wl**2 - 1)**2 - C[3]/(C[4]*wl**2 - 1) + 2*C[5]*wl**2/(C[6] - wl**4)**2 + 2*C[7]*C[8]*wl**4/(C[8]*wl**4 - 1)**2 - C[7]/(C[8]*wl**4 - 1) - 2*C[9]*wl**2/(C[10]*wl**4 - 1))*(-16*C[10]**2*C[9]*wl**10/(C[10]*wl**4 - 1)**3 + 22*C[10]*C[9]*wl**6/(C[10]*wl**4 - 1)**2 + 4*C[1]*wl**2/(C[2] - wl**2)**3 + C[1]/(C[2] - wl**2)**2 - 4*C[3]*C[4]**2*wl**4/(C[4]*wl**2 - 1)**3 + 5*C[3]*C[4]*wl**2/(C[4]*wl**2 - 1)**2 - C[3]/(C[4]*wl**2 - 1) + 16*C[5]*wl**6/(C[6] - wl**4)**3 + 6*C[5]*wl**2/(C[6] - wl**4)**2 - 16*C[7]*C[8]**2*wl**8/(C[8]*wl**4 - 1)**3 + 14*C[7]*C[8]*wl**4/(C[8]*wl**4 - 1)**2 - C[7]/(C[8]*wl**4 - 1) - 6*C[9]*wl**2/(C[10]*wl**4 - 1))/(C[0] - C[1]/(C[2] - wl**2) + C[3]*wl**2/(C[4]*wl**2 - 1) - C[5]/(C[6] - wl**4) + C[7]*wl**2/(C[8]*wl**4 - 1) + C[9]*wl**4/(C[10]*wl**4 - 1)))/np.sqrt(C[0] - C[1]/(C[2] - wl**2) + C[3]*wl**2/(C[4]*wl**2 - 1) - C[5]/(C[6] - wl**4) + C[7]*wl**2/(C[8]*wl**4 - 1) + C[9]*wl**4/(C[10]*wl**4 - 1))